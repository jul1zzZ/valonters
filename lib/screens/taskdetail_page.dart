import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

import 'complete_taks_screen.dart';  // —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

class TaskDetailScreen extends StatelessWidget {
  final QueryDocumentSnapshot task;

  TaskDetailScreen({required this.task});

  Future<void> markAsCompleted(BuildContext context) async {
    try {
      await FirebaseFirestore.instance.collection('tasks').doc(task.id).update({
        'status': 'completed',
        'completedAt': Timestamp.now(),
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–ó–∞–¥–∞–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!')),
      );

      Navigator.of(context).pop();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: $e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final data = task.data() as Map<String, dynamic>;

    return Scaffold(
      appBar: AppBar(title: const Text('–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(data['title'] ?? '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
            const SizedBox(height: 10),

            if (data['photoUrl'] != null && data['photoUrl'].toString().isNotEmpty)
              ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(
                  data['photoUrl'],
                  height: 200,
                  width: double.infinity,
                  fit: BoxFit.cover,
                ),
              ),

            const SizedBox(height: 16),
            Text('üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n${data['description'] ?? '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}'),
            const SizedBox(height: 10),
            Text('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${data['category'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${data['location'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: ${data['eventTime'] != null ? (data['eventTime'] as Timestamp).toDate().toLocal().toString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('‚è± –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${data['estimatedDuration'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üß∞ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${data['services'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${data['assignedTo'] ?? '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üìÖ –°–æ–∑–¥–∞–Ω–æ: ${data['createdAt']?.toDate()?.toLocal() ?? '-'}'),
            const SizedBox(height: 10),
            Text('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${data['completedAt']?.toDate()?.toLocal() ?? '–µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üîë –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${data['createdBy'] ?? '-'}'),
            const SizedBox(height: 24),

            if (data['status'] != 'completed')
              Center(
                child: ElevatedButton.icon(
                  icon: const Icon(Icons.check),
                  label: const Text("–ó–∞–≤–µ—Ä—à–∏—Ç—å"),
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (_) => CompleteTaskScreen(taskId: task.id),
                      ),
                    );
                  },
                ),
              ),
          ],
        ),
      ),
    );
  }
}
