import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import '../utils/helpers.dart';

class TaskHomeScreen extends StatefulWidget {
  final DocumentSnapshot task;

  const TaskHomeScreen({Key? key, required this.task}) : super(key: key);

  @override
  State<TaskHomeScreen> createState() => _TaskHomeScreenState();
}

class _TaskHomeScreenState extends State<TaskHomeScreen> {
  LatLng? selectedLatLng;

 Future<void> _takeTask(BuildContext context) async {
  final uid = FirebaseAuth.instance.currentUser!.uid;
  final docRef = FirebaseFirestore.instance.collection('tasks').doc(widget.task.id);

  try {
    await FirebaseFirestore.instance.runTransaction((transaction) async {
      final snapshot = await transaction.get(docRef);

      if (!snapshot.exists) {
        throw Exception("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      }

      final data = snapshot.data()!;
      final assignedList = List<String>.from(data['assignedToList'] ?? []);
      final maxPeople = data['maxPeople'] ?? 200;

      if (assignedList.contains(uid)) {
        throw Exception("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏");
      }

      if (assignedList.length >= maxPeople) {
        throw Exception("–ú–µ—Å—Ç –±–æ–ª—å—à–µ –Ω–µ—Ç");
      }

      assignedList.add(uid);

      final newStatus = assignedList.length >= maxPeople ? 'done' : 'open';

      transaction.update(docRef, {
        'assignedToList': assignedList,
        'status': newStatus,
      });
    });

    showSuccess("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ!");
    if (!mounted) return;
    Navigator.pop(context);
  } catch (e) {
    showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: ${e.toString()}");
  }
}


  @override
  void initState() {
    super.initState();
    final data = widget.task.data() as Map<String, dynamic>;
    if (data['lat'] != null && data['lng'] != null) {
      selectedLatLng = LatLng(data['lat'], data['lng']);
    }
  }

  @override
  Widget build(BuildContext context) {
    final data = widget.task.data() as Map<String, dynamic>;

    return Scaffold(
      appBar: AppBar(title: const Text('–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              data['title'] ?? '',
              style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            Text('üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n${data['description'] ?? '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}'),
            const SizedBox(height: 10),
            Text('üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${data['category'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üìç –ê–¥—Ä–µ—Å (—Ç–µ–∫—Å—Ç): ${data['location'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'),
            const SizedBox(height: 10),
            if (selectedLatLng != null) ...[
              const Text('üó∫Ô∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ:'),
              const SizedBox(height: 8),
              SizedBox(
                height: 200,
                width: MediaQuery.of(context).size.width * 0.9,
                child: FlutterMap(
                  options: MapOptions(
                    initialCenter: selectedLatLng!,
                    initialZoom: 13,
                  ),
                  children: [
                    TileLayer(
                      urlTemplate:
                          'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                      subdomains: const ['a', 'b', 'c'],
                      userAgentPackageName: 'com.example.app',
                    ),
                    MarkerLayer(
                      markers: [
                        Marker(
                          point: selectedLatLng!,
                          width: 40,
                          height: 40,
                          child: const Icon(
                            Icons.location_pin,
                            size: 40,
                            color: Colors.red,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
            const SizedBox(height: 10),
            Text(
              'üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: ${data['eventTime'] != null ? (data['eventTime'] as Timestamp).toDate().toLocal().toString().split('.')[0] : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}',
            ),
            const SizedBox(height: 10),
            Text('‚è± –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${data['estimatedDuration'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —á.'),
            const SizedBox(height: 10),
            Text('üß∞ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã: ${data['services'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${data['maxPeople'] ?? '-'}'),
            const SizedBox(height: 10),
            Text('üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${data['assignedTo'] ?? '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${data['assignedToList'] != null ? (data['assignedToList'] as List).join(', ') : '–Ω–µ—Ç'}'),
            const SizedBox(height: 10),
            Text('üìÖ –°–æ–∑–¥–∞–Ω–æ: ${data['createdAt'] != null ? (data['createdAt'] as Timestamp).toDate().toLocal().toString().split('.')[0] : '-'}'),
            const SizedBox(height: 10),
            Text('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${data['completedAt'] != null ? (data['completedAt'] as Timestamp).toDate().toLocal().toString().split('.')[0] : '–µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'}'),
            const SizedBox(height: 10),
            Text('üîë –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${data['createdBy'] ?? '-'}'),
            const SizedBox(height: 24),
            const Spacer(),
            if (data['status'] == 'open')
              Center(
                child: ElevatedButton(
                  onPressed: () => _takeTask(context),
                  child: const Text("–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"),
                ),
              ),
          ],
        ),
      ),
    );
  }
}
